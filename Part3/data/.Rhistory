first
first
first <- 1
first
second = 2
second
clas(1)
class(1)
class('1')
class(TRUE)
class(if)
class(-30)
3 & 0
3& 3
3 | 3
3 | 0
FALSE | TRUE
FALSE | FALSE
# ! = NOT
!0
!3
!1
null
NULL
cat(1,NA,2)
cat(1,NULL,2)
sum(1,NA,2)
sum(1,NULL,2)
cat("hi") cat("hi")
cat("hi")
sum(1,NA,2, ba,rm =T)
sum(1,NA,2, na.rm =T)
setwd("d:/workspace/R_Data_Analysis/Part3/data")
txt1 <- read.csv("factor_test.csv")
txt1 <- read.csv("factor_test.csv")
txt1
factor1 <- factor(txt1$blood)
factor1
gender1 <- factor(txt1$sex)
gender1
summary(factor1)
summary(gender1)
View(txt1)
stringsAsFactors = FALSE
stringsAsFactors = FALSE""
stringsAsFactors = FALSE"
list.files()
scan1 <- scan('scan_1.txt')
scan1
scan2 <- scan('scan_2.txt')
scan 2
scan2 <- scan('scan_2.txt')
scan 2
scan2
scan2 <- scan("scan_2.txt what=""); scan2
scan2 <- scan('scan_2.txt', what=""); scan2
what=
what=
scan2 <- scan('scan_2.txt',what=""); scan2
scan3 <- scan('scan_3.txt',what=""); scan3
scan4 <- scan('scan_4.txt',what=""); scan4
input <- scan()
input
input <- scan(what="")
input
input3 <- readline()
a
input3
input4 <- readline("Are you OK? :")
s
hi
a qucik brown fox
input3
input4
input5 <- readLines('scan_4.txt')
input5
fruits <- read.table('fruits.txt')
fruits
fruits <- read.table('fruits.txt' , header =T) ; fruits
#Reading data when not there are comments that user do not wish to import back into the program
fruits2 <- read.table('fruits_2.txt') ; fruits2
#Reading data when not there are comments that user do not wish to import back into the program by default
fruits2 <- read.table('fruits_2.txt', header = T') ; fruits2
#Reading data when not there are comments that user do not wish to import back into the program by default
fruits2 <- read.table('fruits_2.txt', header = T) ; fruits2
#Reading data when not there are comments that user do not wish to import back into the program by default
fruits2 <- read.table('fruits_2.txt', header = T) ; fruits2
#Skipping data using skip =
fruits2 <- read.table('fruits_2.txt',skip=2); fruits2
#Skipping data using skip =
fruits2 <- read.table('fruits_2.txt',skip=2); fruits2
fruits2 <- read.table('fruits_2.txt',nrowsp=2); fruits2
fruits2 <- read.table('fruits_2.txt',nrows=2); fruits2
fruits2 <- read.table('fruits_2.txt',nrows=2); fruits2
f2top <-read.table('fruits_2.txt',nrows=2)
f2bottom <-read.table('fruits_2.txt',skip=3); fruits2
f2top ; f2bottom
fruit3 <- read.csv('fruits_3.csv') ; fruits
#reading csv filrs using read.csv
fruit3 <- read.csv('fruits_3.csv') ; fruits3
3
#reading csv filrs using read.csv
fruit3 <- read.csv('fruits_3.csv') ; fruit
#reading csv filrs using read.csv
fruit3 <- read.csv('fruits_3.csv') ; fruit3
fruits4 <- read.csv('fruits_4.csv') ; fruits4
fruits4 <- read.csv('fruits_4.csv', header = F) ; fruits4 #Set header as faulse
label <-c('NO', 'NAME', 'PRICE', 'QTY')
fruit4 <- read.csv('fruits_4.csv', header = label)
fruit4 <- read.csv('fruits_4.csv', header = F, col.names = label)
fruit4
#install googleVIs packages
install.package('googleVis')
#install googleVIs packages
install.packages('googleVis')
options(repos = c(CRAN = "http://cran.rstudio.com"))
#install googleVIs packages
install.packages("googleVis")
library(googleVis)
install.packages("sqldf")
library('sqldf')
Fruits
#write fruits sql csv file
write.csv(Fruits, "Fruits_sql.csv", quote=F, row.names = F)
fruits2 <- read.csv('Fruits_sql.csv',
sql = "SELECT * FROM file WHERE Year = 2008")
fruits2
fruits2 <- read.csv('Fruits_sql.csv',
sql = "SELECT * FROM file WHERE Year = 2008")
Fruits2 <- read.csv('Fruits_sql.csv',
sql = "SELECT * FROM file WHERE Year = 2008")
View(txt1)
View(fruit4)
Fruits2 <- read.csv('Fruits_sql.csv',
sql = "SELECT * FROM file WHERE Year = 2008")
Fruits2 <- read.csv('Fruits_sql.csv',
sql= "SELECT * FROM file WHERE Year = 2008")
Fruits_2 <- read.csv('Fruits_sql.csv',
sql= "SELECT * FROM file WHERE Year = 2008")
fruits_2 <-read.csv.sql("Fruits_sql.csv",sql="SELECT * FROM file WHERE Year = 2008")
fruits_2
install.packages("XLConnect")
installed.packages()
library(XLConnect)
data1=loadWorkbook('fruits_6.xls', create=T)
data1 <- loadWorkbook('fruits_6.xls', create=T)
data2 <- readWorksheet(data1,sheet='sheet1', startRow = 1, startCol = 1, endCol = 5)
data2
data1
data2 <- readWorksheet(data1,sheet='sheet1', startRow = 1,endRow = 8 startCol = 1, endCol = 5)
data2 <- readWorksheet(data1,sheet='sheet1', startRow = 1, endRow = 8 startCol = 1, endCol = 5)
data2 <- readWorksheet(data1,sheet='sheet1', startRow = 1, endRow = 8, startCol = 1, endCol = 5)
data2
fruits6 <- read.delim("clipboard", header=T)
fruit6
fruits6
fruits6 <- read.delim("clipboard", header=T)
fruits6
install.packages('readxk')
install.packages('readxl')
library(readxl)
fruits7 <- read_excel("fruits_6.xls", # path
sheet = "cust_profile", # sheet name to read from
range = "B3:E8", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
fruits7 <- read_excel("fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
fruits7
subset(Fruits, Fruits$Year==2008)
#Function aka 함수
#help funcion using "?"
?subset()
??ggplot2
??ggplot2()
??ggplot()
vec1 <- c(1:5)
rm(list =ls())
vec1 <- c(1:5)
max(vec1)
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1) ; max(vec2)
mean(vec1)
median(vec1)
min(vec1)
min(vec2)
median(vec2)
sd(vec1)
sum(vec1)
var(vec1)
library(googleVis)
Fruits
aggregate(Sales-Year, Fruits, sum)
aggregate(Sales~Year, Fruits, sum)
aggregate(Sales~Year, Fruits, max)
aggregate(Sales~Year, Fruits, mean)
aggregate(Sales~Fruit, Fruits, sum)
aggregate(Sales~Year, Fruits, max)
aggregate(Sales~Fruit, Fruits, max)
#apply function
mat1 <- matrix(c(1:6), nrow = 2, byrow = T)
apply(mat1, 1, sum)
#apply function
mat1 <- matrix(c(1:6), nrow = 2, byrow = T)
apply(mat1, 1, sum)
apply(mat1, 2, sum)   # 2 - 열 단위 계산
#apply function
mat1 <- matrix(c(1:6), nrow = 2, byrow = T)
#apply function
mat1 <- matrix(c(1:6), nrow = 2, byrow = T) ; mat1
#multiplication -> prod
apply(mat1, 1, prod)   # 1 - 행 단위 계산
apply(mat1, 2, factor)  # 2 - 열 단위 계산
apply(mat1[,c(2,3]))  #
apply(mat1[,c(2,3)]  #
apply(mat1[,c(2,3)])  #
apply(mat1[,c(2,3)],2,max)  #
list2 <- listt(Fruits$Profit); list2
list1 <- list(Fruits$Sales); list1
list2 <- listt(Fruits$Profit); list2
list2 <- list(Fruits$Profit); list2
list1 <- list(Fruits$Sales); list1
lapply(c(list1,list2),max)
sapply(c(list1,list2),max)
lapply(Fruits[,c(4,5)])
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
attach(Fruits)
tapply(Sales, Fruit, sum) #attach() 를 먼저 해야함
tapply(Sales,Fruit,sum)
tapply(Sales,Year,sum)
vec <- c(1:5)
vec1 <- c(1:5)
rm(vec)
vec2 <- seq(10,50,10)
vec3 <- seq(100,500,100)
mapply(sum,vec1,vec2,vec3)
data1 <- read.csv('data1.csv')
data1
aggregate(연령별~Year, data1,sum)
apply(,data1,sum)
apply(Year,data1,sum)
apply(연령별별,data1,sum)
apply(연령별,data1,sum)
data1
apply(data1,,sum)
apply(data1,col,sum)
apply(data1,1,sum)
apply(data1,2,sum)
data1
apply(data1, 1, sum)
apply(data1, 2, sum)
apply(data1, data1$X2000년:data1$X2013년, sum)
apply(data1, data1$X2000년~data1$X2013년, sum)
aggregate(data1$X2000년:data1$X2013년,data1,sum)
#2
data2 <- read.csv('1-4호선승하차승객수.csv')
#노선번호별 승차인원수 합계
#노선번호별 승차인원수 합계
apply(data2[,c(2,3)],2,sum)
apply(data1[,c(2,3)],2,sum)
apply(data1[,c(1:13)],2,sum)
apply(data1[,c(1:12)],2,sum)
apply(data1[,c(1:11)],2,sum)
apply(data1[,c(1:2)],2,sum)
apply(data1[1,],2,sum)
apply(data1[c(2,3)],1,sum)
apply(data1[c(1,3)],1,sum)
apply(data1[c(1,2)],1,sum)
apply(data1[c(3,4)],1,sum)
apply(data1[c(3,4)],2,sum)
apply(data1[c(3,4,5
)],2,sum)
apply(data1[c(2:14)],2,sum)
apply(data1[c(2:15)],2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[c(1,5),],1,sum)
apply(data1[,c(1:5)],1,sum)
apply(data1[,c(2,3)],1,sum)
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:14)],1,sum)
apply(data1[,],1,sum)
apply(data1[],1,sum)
apply(data1,1,sum)
apply(data1[,c(2:15)],1,sum)
#노선번호별 승차인원수 합계
apply(data2[,c(2,3)],2,sum)
#노선번호별 승차인원수 합계
tapply(data2,승차인원수,sum)
#노선번호별 승차인원수 합계
tapply(data2,'승차인원수',sum)
#노선번호별 승차인원수 합계
attach(data2)
tapply(data2,승차인원수,sum)
tapply(c(1:20),승차인원수,sum)
apply(data2[data2$승차],1,sum)
apply(data2[data2$승차],2,sum)
apply(data2[data2$승차],1,sum)
apply(data2$승차,1,sum)
apply(data2$승차,2,sum)
apply(data2[c(,2:4)],1,sum)
apply(data2[c(,2,3)],1,sum)
apply(data2[c(2:3)],1,sum)
apply(data2[c(2:3)],2,sum)
apply(data2[c(2:5)],2,sum)
apply(data2[c(2:4)],2,sum)
apply(data2[c(3:4)],2,sum)
data1
#노선번호별 승차인원수 합계
attach(data2)
tapply(노서번호,승차차)
tapply(노서번호,승차,sum)
tapply(노선선번호,승차,sum)
tapply(노선번호,승차,sum)
tapply(승차,노선번호,sum)
#노선번호별 하차 인원수 합계
tapply(하차,노선번호,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[c(3:4)],2,sum)
#노선 번호별 승하차 인원수 합계
apply(data2,1,sum)
#노선 번호별 승하차 인원수 합계
apply(data2[3,4],1,sum)
#노선 번호별 승하차 인원수 합계
apply(data2[c(3,4)],1,sum)
data2
aggregate(노선번호~승차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2[c(3,4)],sum)
aggregate(승차+하차~노선번호,data2,sum)
#노선 번호별 승차 및 하차 인원수 합계
aggregate(승차~노선본호,data2,sum)
#노선 번호별 승차 및 하차 인원수 합계
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
apply(data1[,-1],1,sum)
#연령별 합계
apply(data1[,c(2:15)],1,sum)
#노선 번호별 승하차 인원수 합계
apply(data2[c(3,4)],1,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[,c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[1,c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[1:3,c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[1:55,c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[1:555,c(3:4)],2,sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[c(3:4)],2,sum)
sapply(data2[,c(3:4],2,sum)])
sapply(data2[,c(3:4],2,sum))
sapply(data2[,c(3:4)],2,sum))
sapply(data2[,c(3:4)],2,sum)
sapply(data2[,c(3:4)],,sum)
sapply(data2[,c(3:4)],sum)
#노선 번호 상관없이 승차 하차 인원수 합계
apply(data2[c(3:4)],2,sum)
#Function
mat1 <- matrix(c(1:6), nrow =2, byrow = T)
a <- rep(1, 3)
sweep(mat1, 2, a)
b <- matrix(c(2,2))
sweep(mat1, 1, b) #행방향으로 Sweep
a <- c(1,2,3,4,5) ; length(a)
length(mat1)
length(mat1)
library(googleVis)
length(Fruits)
long(10)
sweep(mat1, 2, a)
v2 <- c(-1,-2,33,-4)
abs(v2)
ceiling(2.3)
floor(2.3)
floor(2.5)
floor(2.8)
floor(-2.3)
ceiling(-2.3)
round(2.555)
round(2.5)
round(2.5,0
round(2.5,0)
round(2.5,digits = 0)
round(3.5,digits=0)
choose(3,5)
choose(5,3)
return(10)
myfunc <- function() {
return(10)
}
myfunc()
myfunc <- function() {
return(10)
}
choose(10,2)
choose(10,3)
choose(5,2)
choose(5,3)
myfunc2 <- funtion(x) {
y = x*x;
return(y)
}
return(y)
myfunc2(-3)
y <- x * x;
myfunc2 <- function(x) {
y = x * x;
return(y)
}
myfunc2(-3)
func_test1(3,2)
#Practice Questions
#두수를 입력 받아 첫수에서 두번째 수를 빼고 결과 출력
func_test1 <- function(x,y) {
answer = x-y
return(answer)
}
func_test1(3,2)
func_test1(2,3)
func_test1((a,a))
func_test1((aa))
abs(return(answer))
abs(return(answer))
answer = x-y
#2
#양수이든 음수이든 무조건 야수로 출력
func_test1 <- function(x,y){
answer = x-y
abs(return(answer))
}
func_test1(2,3)
return(answer)
answer
return(answer)
answer = abs(x-y)
#2
#양수이든 음수이든 무조건 야수로 출력
func_test1 <- function(x,y){
answer = abs(x-y)
return(answer)
}
func_test1(2,3)
func_test1(3,2)
ggplot2::geom_bar
abs()::geom_bar
abs::geom_bar
googleVis::geom_bar
??abs()
??round()
??round()
??round
??round()
?round()
library(ggplot2)
download.packages(ggplot2)
download.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
ggplot(data=pressure, aes(x=termperature, y=pressure))
ggplot(data=pressure, aes(x=temperature, y=pressure))
ggplot(data=pressure, aes(x=temperature, y=pressure))
ggplot(data=pressure, aes(x=temperature, y=pressure)) +
geom_point()+
geom_line()
ggplot(data=pressure, aes(x=temperature, y=pressure)) +
geom_point()+
geom_blank()
line()
line()
ggplot(data=pressure, aes(x=temperature, y=pressure)) +
geom_point()+
geom_line()
answer = x-y
#Practice Questions
#1
#두수를 입력 받아 첫수에서 두번째 수를 빼고 결과 출력
func_test1 <- function(x,y) {
answer = x-y
return(answer)
}
exfunc2 <- function(a,b) {
result <-abs(func_test1())
}
func_test1(5,200)
exfunc2(5,500)
exfunc2 <- function(x,y) {
result <-abs(func_test1())
}
exfunc2(5,500)
exfunc2 <- function(x,y) {
result <-abs(func_test1())
}
exfunc2(5,500)
return(result)
return(result)
exfunc2 <- function(x,y) {
result <-abs(func_test1(x,y))
return(result)
}
exfunc2(5,500)
func_test1(5,200)
